<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $fillable=[ 'title', 'body','iframe','excerpt','published_at','category_id','user_id' ];
    protected $dates =['published_at'];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function($post){
            $post->photos->each->delete();
        });
    }

    public function getRouteKeyName()
    {
        return 'url';
    }

    public function setPublishedAtAttribute($published_at)
    {
        $this->attributes['published_at'] = $published_at ? Carbon::parse($published_at): null;
    }

    public function photos()
    {
        return $this->hasMany(Photo::class);
    }

    public function owner()
    {
        return $this->belongsTo(User::class,'user_id');
    }

    public function categories()
    {
        return $this->belongsToMany(Category::class);
    }


    public function scopePublished($query)
    {
        $query->with(['categories','owner'])
            ->whereNotNull('published_at')
            ->where('published_at', '<=', Carbon::now())
            ->latest('published_at');
    }

    public function headerType($home ='')
    {
        if ($this->photos->count() === 1):
            return'partials.front.photo';
        elseif($this->photos->count() > 1):
            return $home === 'home'? 'partials.front.carousel-preview' : 'partials.front.carousel';
        elseif($this->iframe):
            return 'partials.front.iframe';
        else:
            return 'partials.front.text';
        endif;
    }

    public function scopeLatestPosts($query)
    {
        $query->select('title','url','published_at')
            ->orderBy('published_at','desc')
            ->take(5);
    }

}
